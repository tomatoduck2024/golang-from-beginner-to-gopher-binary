"use strict";(self.webpackChunkgolang_from_beginner_to_gopher=self.webpackChunkgolang_from_beginner_to_gopher||[]).push([[2656],{3167:e=>{e.exports=JSON.parse('{"version":{"pluginId":"concurrency","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"concurrencySidebar":[{"type":"link","label":"Introduction to Concurrency in Go","href":"/golang-from-beginner-to-gopher-binary/docs/concurrency/intro","docId":"intro","unlisted":false},{"type":"link","label":"Defer","href":"/golang-from-beginner-to-gopher-binary/docs/concurrency/defer","docId":"defer","unlisted":false},{"type":"link","label":"WaitGroup","href":"/golang-from-beginner-to-gopher-binary/docs/concurrency/waitgroup","docId":"waitgroup","unlisted":false},{"type":"link","label":"Context","href":"/golang-from-beginner-to-gopher-binary/docs/concurrency/context","docId":"context","unlisted":false},{"type":"link","label":"Mutex and RWMutex","href":"/golang-from-beginner-to-gopher-binary/docs/concurrency/mutex-rwmutex","docId":"mutex-rwmutex","unlisted":false},{"type":"link","label":"Timer","href":"/golang-from-beginner-to-gopher-binary/docs/concurrency/timer","docId":"timer","unlisted":false},{"type":"link","label":"TODO","href":"/golang-from-beginner-to-gopher-binary/docs/concurrency/TODO","docId":"TODO","unlisted":false},{"type":"link","label":"Ticker","href":"/golang-from-beginner-to-gopher-binary/docs/concurrency/ticker","docId":"ticker","unlisted":false},{"type":"category","label":"go_scheduler","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"GMP Model","href":"/golang-from-beginner-to-gopher-binary/docs/concurrency/go_scheduler/gmp","docId":"go_scheduler/gmp","unlisted":false}]}]},"docs":{"context":{"id":"context","title":"Context","description":"Using the context package for cancellation, timeouts, and passing request-scoped values.","sidebar":"concurrencySidebar"},"defer":{"id":"defer","title":"Defer","description":"Understanding the defer statement in Go.","sidebar":"concurrencySidebar"},"go_scheduler/gmp":{"id":"go_scheduler/gmp","title":"GMP Model","description":"Explanation of Go\'s GMP (Goroutine, Machine, Processor) model for concurrency.","sidebar":"concurrencySidebar"},"intro":{"id":"intro","title":"Introduction to Concurrency in Go","description":"This section covers concurrency concepts in Golang.","sidebar":"concurrencySidebar"},"mutex-rwmutex":{"id":"mutex-rwmutex","title":"Mutex and RWMutex","description":"Synchronization with sync.Mutex and sync.RWMutex.","sidebar":"concurrencySidebar"},"ticker":{"id":"ticker","title":"Ticker","description":"Using time.Ticker for recurring events.","sidebar":"concurrencySidebar"},"timer":{"id":"timer","title":"Timer","description":"Using time.Timer for future events.","sidebar":"concurrencySidebar"},"TODO":{"id":"TODO","title":"TODO","description":"Go Scheduler","sidebar":"concurrencySidebar"},"waitgroup":{"id":"waitgroup","title":"WaitGroup","description":"Using sync.WaitGroup to wait for a collection of goroutines to finish.","sidebar":"concurrencySidebar"}}}}')}}]);